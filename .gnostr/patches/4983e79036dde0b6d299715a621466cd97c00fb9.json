{"content":"From 4983e79036dde0b6d299715a621466cd97c00fb9 Mon Sep 17 00:00:00 2001\nFrom: 0ceanSlim <89587889+0ceanSlim@users.noreply.github.com>\nDate: Tue, 7 Nov 2023 22:08:49 -0500\nSubject: [PATCH] first commit\n\n---\n .gitignore      |  1 +\n README.md       | 44 ++++++++++++++++++++++++++++++++++++++++++++\n createWallet.py | 34 ++++++++++++++++++++++++++++++++++\n getAddress.py   | 52 ++++++++++++++++++++++++++++++++++++++++++++++++++++\n issueAsset.py   | 59 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n listBalance.py  | 62 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n listUTXO.py     | 60 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n listWallets.py  | 31 +++++++++++++++++++++++++++++++\n submitTxn.py    | 66 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n 9 files changed, 409 insertions(+)\n create mode 100644 .gitignore\n create mode 100644 README.md\n create mode 100644 createWallet.py\n create mode 100644 getAddress.py\n create mode 100644 issueAsset.py\n create mode 100644 listBalance.py\n create mode 100644 listUTXO.py\n create mode 100644 listWallets.py\n create mode 100644 submitTxn.py\n\ndiff --git a/.gitignore b/.gitignore\nnew file mode 100644\nindex 0000000..4bdc9d5\n--- /dev/null\n+++ b/.gitignore\n@@ -0,0 +1 @@\n+/my_rpc_config.json\n\\ No newline at end of file\ndiff --git a/README.md b/README.md\nnew file mode 100644\nindex 0000000..596fe1c\n--- /dev/null\n+++ b/README.md\n@@ -0,0 +1,44 @@\n+# Elements Node Python RPC Tools\n+\n+This repository contains a collection of simple Python tools for interacting with an Elements node using RPC credentials. These scripts allow you to perform various tasks such as checking balances, sending assets, creating wallets, and more.\n+\n+## Prerequisites\n+\n+Before using these scripts, make sure you have the following prerequisites installed:\n+\n+- Python (3.x recommended)\n+- The `python-bitcoinrpc` library for RPC communication.\n+\n+You can install the required library using pip:\n+\n+```bash\n+pip install python-bitcoinrpc\n+```\n+\n+## Usage\n+\n+Clone this repository to your local machine:\n+\n+```bash\n+git clone https://happytavern.co/oceanslim/elements.py.git\n+cd elements.py\n+```\n+\n+## Configuration\n+\n+Create a configuration file, rpc_config.json, and specify your RPC credentials and node information:\n+\n+```bash\n+{\n+  \"rpc_host\": \"xx.x.xx.xxx\",\n+  \"rpc_port\": 7041,\n+  \"rpc_user\": \"rpc_user\",\n+  \"rpc_password\": \"rpc_password\"\n+}\n+```\n+\n+Modify the scripts to read the RPC configuration from the rpc_config.json file. You can customize the configuration as needed.\n+\n+## License\n+\n+This repository is provided under the MIT License. Feel free to use, modify, and distribute these scripts as needed. Contributions and improvements are welcome. ❤️\n\\ No newline at end of file\ndiff --git a/createWallet.py b/createWallet.py\nnew file mode 100644\nindex 0000000..bb589cb\n--- /dev/null\n+++ b/createWallet.py\n@@ -0,0 +1,34 @@\n+from bitcoinrpc.authproxy import AuthServiceProxy, JSONRPCException\n+import json\n+\n+# Read the RPC configuration from the configuration file\n+with open(\"rpc_config.json\", \"r\") as config_file:\n+    config = json.load(config_file)\n+\n+rpc_host = config[\"rpc_host\"]\n+rpc_port = config[\"rpc_port\"]\n+rpc_user = config[\"rpc_user\"]\n+rpc_password = config[\"rpc_password\"]\n+\n+# Wallet name to create\n+wallet_name = \"wallet_1\"  # Specify the desired wallet name\n+\n+try:\n+    rpc_connection = AuthServiceProxy(\n+        f\"http://{rpc_user}:{rpc_password}@{rpc_host}:{rpc_port}\"\n+    )\n+\n+    # Check if the wallet already exists\n+    wallet_info = rpc_connection.listwallets()\n+\n+    # If the wallet doesn't exist, create it\n+    if wallet_name not in wallet_info:\n+        rpc_connection.createwallet(wallet_name)\n+        print(f\"Wallet '{wallet_name}' created successfully.\")\n+    else:\n+        print(f\"Wallet '{wallet_name}' already exists.\")\n+\n+except JSONRPCException as json_exception:\n+    print(\"A JSON RPC Exception occurred: \" + str(json_exception))\n+except Exception as general_exception:\n+    print(\"An Exception occurred: \" + str(general_exception))\ndiff --git a/getAddress.py b/getAddress.py\nnew file mode 100644\nindex 0000000..0ed48d0\n--- /dev/null\n+++ b/getAddress.py\n@@ -0,0 +1,52 @@\n+from bitcoinrpc.authproxy import AuthServiceProxy, JSONRPCException\n+import json\n+\n+## Read the RPC configuration from the configuration file\n+with open(\"rpc_config.json\", \"r\") as config_file:\n+    config = json.load(config_file)\n+\n+rpc_host = config[\"rpc_host\"]\n+rpc_port = config[\"rpc_port\"]\n+rpc_user = config[\"rpc_user\"]\n+rpc_password = config[\"rpc_password\"]\n+\n+try:\n+    rpc_connection = AuthServiceProxy(\n+        f\"http://{rpc_user}:{rpc_password}@{rpc_host}:{rpc_port}\"\n+    )\n+\n+    # List available wallets\n+    wallet_list = rpc_connection.listwallets()\n+\n+    if not wallet_list:\n+        print(\"No wallets found.\")\n+    else:\n+        if len(wallet_list) == 1:\n+            # If there's only one wallet, use it\n+            wallet_name = wallet_list[0]\n+        else:\n+            # If multiple wallets exist, prompt the user to select one\n+            print(\"Available wallets:\")\n+            for i, wallet in enumerate(wallet_list):\n+                print(f\"{i + 1}. {wallet}\")\n+\n+            wallet_index = (\n+                int(input(\"Enter the number of the wallet to get a new address for: \"))\n+                - 1\n+            )\n+\n+            if 0 <= wallet_index < len(wallet_list):\n+                wallet_name = wallet_list[wallet_index]\n+            else:\n+                print(\"Invalid wallet selection. Exiting.\")\n+                exit()\n+\n+        # Get a new address for the selected wallet\n+        new_address = rpc_connection.getnewaddress(wallet_name)\n+\n+        print(f\"New receiving address for wallet '{wallet_name}': {new_address}\")\n+\n+except JSONRPCException as json_exception:\n+    print(\"A JSON RPC Exception occurred: \" + str(json_exception))\n+except Exception as general_exception:\n+    print(\"An Exception occurred: \" + str(general_exception))\ndiff --git a/issueAsset.py b/issueAsset.py\nnew file mode 100644\nindex 0000000..484cb59\n--- /dev/null\n+++ b/issueAsset.py\n@@ -0,0 +1,59 @@\n+from bitcoinrpc.authproxy import AuthServiceProxy, JSONRPCException\n+import json\n+\n+# Read the RPC configuration from the configuration file\n+with open(\"rpc_config.json\", \"r\") as config_file:\n+    config = json.load(config_file)\n+\n+rpc_host = config[\"rpc_host\"]\n+rpc_port = config[\"rpc_port\"]\n+rpc_user = config[\"rpc_user\"]\n+rpc_password = config[\"rpc_password\"]\n+\n+# Asset issuance parameters\n+asset_quantity = 100\n+asset_name = \"MyAsset\"  # Uncomment and specify the asset name\n+asset_ticker = \"MA\"  # Uncomment and specify the asset ticker symbol\n+asset_divisibility = 8  # Uncomment and specify the divisibility\n+# asset_issuer = \"issuer_address\"  # Uncomment and specify the issuer address\n+# asset_total_tokens = 1000  # Uncomment and specify the total tokens\n+# asset_expiry = \"YYYY-MM-DD\"  # Uncomment and specify the asset expiry date\n+# asset_minimum_amount = 0.00000001  # Uncomment and specify the minimum amount\n+# reissuance_tokens = 1  # Uncomment and specify the number of reissuance tokens\n+is_open_asset = True  # Uncomment to specify if the asset is open\n+\n+try:\n+    rpc_connection = AuthServiceProxy(\n+        f\"http://{rpc_user}:{rpc_password}@{rpc_host}:{rpc_port}\"\n+    )\n+\n+    # Construct the issueasset command with the specified options\n+    issue_command = f\"issueasset {asset_quantity}\"\n+\n+    # Uncomment and customize the options in the issue command as needed\n+    # if asset_name:\n+    #     issue_command += f' \"{asset_name}\"'\n+    # if asset_ticker:\n+    #     issue_command += f' \"{asset_ticker}\"'\n+    # if asset_divisibility is not None:\n+    #     issue_command += f' {asset_divisibility}'\n+    # if asset_issuer:\n+    #     issue_command += f' \"{asset_issuer}\"'\n+    # if asset_total_tokens is not None:\n+    #     issue_command += f' {asset_total_tokens}'\n+    # if asset_expiry:\n+    #     issue_command += f' \"{asset_expiry}\"'\n+    # if asset_minimum_amount is not None:\n+    #     issue_command += f' {asset_minimum_amount}'\n+    # if reissuance_tokens is not None:\n+    #     issue_command += f' {reissuance_tokens}'\n+    # if is_open_asset is not None:\n+    #     issue_command += f' {\"open\" if is_open_asset else \"confidential\"}'\n+\n+    issuance_result = rpc_connection.help(issue_command)\n+    print(\"Asset issuance result:\", issuance_result)\n+\n+except JSONRPCException as json_exception:\n+    print(\"A JSON RPC Exception occurred: \" + str(json_exception))\n+except Exception as general_exception:\n+    print(\"An Exception occurred: \" + str(general_exception))\ndiff --git a/listBalance.py b/listBalance.py\nnew file mode 100644\nindex 0000000..9b4897c\n--- /dev/null\n+++ b/listBalance.py\n@@ -0,0 +1,62 @@\n+from bitcoinrpc.authproxy import AuthServiceProxy, JSONRPCException\n+import json\n+\n+# Read the RPC configuration from the configuration file\n+with open(\"rpc_config.json\", \"r\") as config_file:\n+    config = json.load(config_file)\n+\n+rpc_host = config[\"rpc_host\"]\n+rpc_port = config[\"rpc_port\"]\n+rpc_user = config[\"rpc_user\"]\n+rpc_password = config[\"rpc_password\"]\n+\n+try:\n+    rpc_connection = AuthServiceProxy(\n+        f\"http://{rpc_user}:{rpc_password}@{rpc_host}:{rpc_port}\"\n+    )\n+\n+    # List available wallets\n+    wallet_list = rpc_connection.listwallets()\n+\n+    if not wallet_list:\n+        print(\"No wallets found.\")\n+    else:\n+        if len(wallet_list) == 1:\n+            # If there's only one wallet, use it\n+            wallet_name = wallet_list[0]\n+        else:\n+            # If multiple wallets exist, prompt the user to select one\n+            print(\"Available wallets:\")\n+            for i, wallet in enumerate(wallet_list):\n+                print(f\"{i + 1}. {wallet}\")\n+\n+            wallet_index = (\n+                int(input(\"Enter the number of the wallet to check balances for: \")) - 1\n+            )\n+\n+            if 0 <= wallet_index < len(wallet_list):\n+                wallet_name = wallet_list[wallet_index]\n+            else:\n+                print(\"Invalid wallet selection. Exiting.\")\n+                exit()\n+\n+        # List unspent transaction outputs (UTXOs)\n+        utxos = rpc_connection.listunspent(0, 9999999, [], True)\n+\n+        # Calculate asset balances\n+        asset_balances = {}\n+        for utxo in utxos:\n+            asset = utxo.get(\"asset\", \"\")\n+            if asset != \"bitcoin\":\n+                if asset not in asset_balances:\n+                    asset_balances[asset] = 0\n+                asset_balances[asset] += utxo[\"amount\"]\n+\n+        print(f\"Asset balances for wallet '{wallet_name}':\")\n+        for asset, balance in asset_balances.items():\n+            print(f\"{asset}: {balance:.8f}\")\n+\n+except JSONRPCException as json_exception:\n+    print(\"A JSON RPC Exception occurred: \" + str(json_exception))\n+except Exception as general_exception:\n+    print(\"An Exception occurred: \" + str(general_exception))\ndiff --git a/listUTXO.py b/listUTXO.py\nnew file mode 100644\nindex 0000000..4d7bbaa\n--- /dev/null\n+++ b/listUTXO.py\n@@ -0,0 +1,60 @@\n+from bitcoinrpc.authproxy import AuthServiceProxy, JSONRPCException\n+import json\n+\n+# Read the RPC configuration from the configuration file\n+with open(\"rpc_config.json\", \"r\") as config_file:\n+    config = json.load(config_file)\n+\n+rpc_host = config[\"rpc_host\"]\n+rpc_port = config[\"rpc_port\"]\n+rpc_user = config[\"rpc_user\"]\n+rpc_password = config[\"rpc_password\"]\n+\n+try:\n+    rpc_connection = AuthServiceProxy(\n+        f\"http://{rpc_user}:{rpc_password}@{rpc_host}:{rpc_port}\"\n+    )\n+\n+    # List available wallets\n+    wallet_list = rpc_connection.listwallets()\n+\n+    if not wallet_list:\n+        print(\"No wallets found.\")\n+    else:\n+        if len(wallet_list) == 1:\n+            # If there's only one wallet, use it\n+            wallet_name = wallet_list[0]\n+        else:\n+            # If multiple wallets exist, prompt the user to select one\n+            print(\"Available wallets:\")\n+            for i, wallet in enumerate(wallet_list):\n+                print(f\"{i + 1}. {wallet}\")\n+\n+            wallet_index = (\n+                int(input(\"Enter the number of the wallet to check transactions for: \"))\n+                - 1\n+            )\n+\n+            if 0 <= wallet_index < len(wallet_list):\n+                wallet_name = wallet_list[wallet_index]\n+            else:\n+                print(\"Invalid wallet selection. Exiting.\")\n+                exit()\n+\n+        # Get the list of transactions for the selected wallet\n+        transactions = rpc_connection.listtransactions(wallet_name)\n+\n+        if not transactions:\n+            print(f\"No transactions found for wallet '{wallet_name}'.\")\n+        else:\n+            print(f\"Transactions for wallet '{wallet_name}':\")\n+            for transaction in transactions:\n+                print(f\"Transaction ID: {transaction['txid']}\")\n+                print(f\"Category: {transaction['category']}\")\n+                print(f\"Amount: {transaction['amount']} {transaction['asset']}\")\n+                print(f\"Confirmations: {transaction['confirmations']}\\n\")\n+\n+except JSONRPCException as json_exception:\n+    print(\"A JSON RPC Exception occurred: \" + str(json_exception))\n+except Exception as general_exception:\n+    print(\"An Exception occurred: \" + str(general_exception))\ndiff --git a/listWallets.py b/listWallets.py\nnew file mode 100644\nindex 0000000..a904ba8\n--- /dev/null\n+++ b/listWallets.py\n@@ -0,0 +1,31 @@\n+from bitcoinrpc.authproxy import AuthServiceProxy, JSONRPCException\n+import json\n+\n+# Read the RPC configuration from the configuration file\n+with open(\"rpc_config.json\", \"r\") as config_file:\n+    config = json.load(config_file)\n+\n+rpc_host = config[\"rpc_host\"]\n+rpc_port = config[\"rpc_port\"]\n+rpc_user = config[\"rpc_user\"]\n+rpc_password = config[\"rpc_password\"]\n+\n+try:\n+    rpc_connection = AuthServiceProxy(\n+        f\"http://{rpc_user}:{rpc_password}@{rpc_host}:{rpc_port}\"\n+    )\n+\n+    # List available wallets\n+    wallet_list = rpc_connection.listwallets()\n+\n+    if wallet_list:\n+        print(\"Available wallets:\")\n+        for wallet in wallet_list:\n+            print(wallet)\n+    else:\n+        print(\"No wallets found.\")\n+\n+except JSONRPCException as json_exception:\n+    print(\"A JSON RPC Exception occurred: \" + str(json_exception))\n+except Exception as general_exception:\n+    print(\"An Exception occurred: \" + str(general_exception))\ndiff --git a/submitTxn.py b/submitTxn.py\nnew file mode 100644\nindex 0000000..93b545a\n--- /dev/null\n+++ b/submitTxn.py\n@@ -0,0 +1,66 @@\n+from bitcoinrpc.authproxy import AuthServiceProxy, JSONRPCException\n+import json\n+\n+# Read the RPC configuration from the configuration file\n+with open(\"rpc_config.json\", \"r\") as config_file:\n+    config = json.load(config_file)\n+\n+rpc_host = config[\"rpc_host\"]\n+rpc_port = config[\"rpc_port\"]\n+rpc_user = config[\"rpc_user\"]\n+rpc_password = config[\"rpc_password\"]\n+\n+try:\n+    rpc_connection = AuthServiceProxy(\n+        f\"http://{rpc_user}:{rpc_password}@{rpc_host}:{rpc_port}\"\n+    )\n+\n+    # List available wallets\n+    wallet_list = rpc_connection.listwallets()\n+\n+    if not wallet_list:\n+        print(\"No wallets found.\")\n+    else:\n+        if len(wallet_list) == 1:\n+            # If there's only one wallet, use it\n+            wallet_name = wallet_list[0]\n+        else:\n+            # If multiple wallets exist, prompt the user to select one\n+            print(\"Available wallets:\")\n+            for i, wallet in enumerate(wallet_list):\n+                print(f\"{i + 1}. {wallet}\")\n+\n+            wallet_index = (\n+                int(input(\"Enter the number of the wallet to send from: \")) - 1\n+            )\n+\n+            if 0 <= wallet_index < len(wallet_list):\n+                wallet_name = wallet_list[wallet_index]\n+            else:\n+                print(\"Invalid wallet selection. Exiting.\")\n+                exit()\n+\n+        # Prompt the user for the receiving address\n+        destination_address = input(\"Enter the receiving address: \")\n+\n+        if not rpc_connection.validateaddress(destination_address)[\"isvalid\"]:\n+            print(\"Invalid destination address. Exiting.\")\n+            exit()\n+\n+        # Get the asset name you want to send\n+        asset_name = input(\"Enter the asset name (e.g., demoasset): \")\n+\n+        # Get the amount to send\n+        amount = float(input(f\"Enter the amount of {asset_name} to send: \"))\n+\n+        # Send the asset to the destination address\n+        txid = rpc_connection.sendtoaddress(\n+            destination_address, amount, asset_name, \"\", False, True, 1\n+        )\n+\n+        print(f\"Asset sent. Transaction ID: {txid}\")\n+\n+except JSONRPCException as json_exception:\n+    print(\"A JSON RPC Exception occurred: \" + str(json_exception))\n+except Exception as general_exception:\n+    print(\"An Exception occurred: \" + str(general_exception))\n--\nlibgit2 1.6.4\n\n","created_at":1706217663,"id":"919188186010727813724f696cfd5edd03a409f11e785d2ab194ccb4aa72f480","kind":410,"pubkey":"16f1a0100d4cfffbcc4230e8e0e4290cc5849c1adc64d6653fda07c031b1074b","sig":"55e5ab0b0736fd6eeb0da763a6fc341aa8623295a4a9a11218ea7522d411c3a92670429c316c631b72816ed1a3ede1a39b5fc485898f6b7f03f3c5c9cd223117","tags":[["repo","81955cad0ffa00edf912e972699f7f130d372957f2fb4de66fdf7011a623712b"],["e","81955cad0ffa00edf912e972699f7f130d372957f2fb4de66fdf7011a623712b"],["branch","81955cad0ffa00edf912e972699f7f130d372957f2fb4de66fdf7011a623712b"],["e","81955cad0ffa00edf912e972699f7f130d372957f2fb4de66fdf7011a623712b"],["commit-message","first commit\n"],["t","gnostr-event"],["t","gnostr-format-0.0.0"],["commit","4983e79036dde0b6d299715a621466cd97c00fb9"],["t","initial-commit"]]}